#maxima ve minima olarak çalıştı,tepe ve dip değerleri bulunup grafik üzerinde işaretlendi.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import yfinance as yf
from scipy.signal import argrelextrema

ticker = 'AKSA.IS'
yfObj = yf.Ticker(ticker)
data = yfObj.history(start='2022-12-01', end='2023-01-30')

max_idx = argrelextrema(data['Close'].values, np.greater, order=5)[0]
min_idx = argrelextrema(data['Close'].values, np.less, order=5)[0]

plt.figure(figsize=(35, 15))
plt.plot(data['Close'], zorder=0)
plt.scatter(data.iloc[max_idx].index, data.iloc[max_idx]['Close'],label='Maxima', s=100, color='green', marker='^')
plt.scatter(data.iloc[min_idx].index, data.iloc[min_idx]['Close'],label='Minima', s=100, color='red', marker='v')

for i, txt in enumerate(data.iloc[max_idx]['Close'].apply(lambda x: "{:.2f}".format(x))):
    plt.annotate(txt, (data.iloc[max_idx].index[i], data.iloc[max_idx]['Close'][i]), 
                 xytext=(-10,10), textcoords='offset points')

for i, txt in enumerate(data.iloc[min_idx]['Close'].apply(lambda x: "{:.2f}".format(x))):
    plt.annotate(txt, (data.iloc[min_idx].index[i], data.iloc[min_idx]['Close'][i]), 
                 xytext=(-10,10), textcoords='offset points')

plt.xticks(rotation=90)
plt.legend()
plt.show()

maxima_dates = data.iloc[max_idx].index
maxima_values = data.iloc[max_idx]['Close']

minima_dates = data.iloc[min_idx].index
minima_values = data.iloc[min_idx]['Close']



data['Maxima'] = 0.0
data['Maxima'].iloc[max_idx] = data['Close'].iloc[max_idx].values
data['Minima'] = 0.0
data['Minima'].iloc[min_idx] = data['Close'].iloc[min_idx].values

data['Maxima Date'] = None
data['Maxima Date'].iloc[max_idx] = data.index[max_idx].strftime('%Y-%m-%d')
data['Minima Date'] = None
data['Minima Date'].iloc[min_idx] = data.index[min_idx].strftime('%Y-%m-%d')
print(data.tail(10))
****************************
yukarıdakinden farklı bir mantık ve kod,aşagıdaki çalıştı sıkıntı yok.

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker as mtick
from scipy import signal

# Get the stock data
ticker = 'AKSA.IS'
df = yf.Ticker(ticker).history(start='2022-12-01', end='2023-02-27')


# Convert dates to numbers
df['Date'] = pd.to_datetime(df.index)
df['Date'] = [mdates.date2num(d) for d in df['Date']]

# Get the values for the close price
data_x = df['Date'].values
data_tepe = df['High'].values #tepe için 
data_dip = df['Low'].values  #dip için

# Find the tepe and dip values
tepe_indexes = signal.argrelextrema(data_tepe, np.greater)
tepe_indexes = tepe_indexes[0]
dip_indexes = signal.argrelextrema(data_dip, np.less)
dip_indexes = dip_indexes[0]


prev_tepe = None
prev_dip = None

tepe_indexes_to_keep = []
dip_indexes_to_keep = []

for i in range(len(tepe_indexes)):
    index = tepe_indexes[i]
    if prev_tepe is not None:
        diff = abs(data_tepe[index] - prev_tepe) / prev_tepe
        if diff < 0.01:
            if data_tepe[index] > prev_tepe:
                tepe_indexes_to_keep.pop()
            prev_tepe = max(data_tepe[index], prev_tepe)
        else:
            prev_tepe = data_tepe[index]
            tepe_indexes_to_keep.append(index)
    else:
        prev_tepe = data_tepe[index]
        tepe_indexes_to_keep.append(index)

for i in range(len(dip_indexes)):
    index = dip_indexes[i]
    if prev_dip is not None:
        diff = abs(data_dip[index] - prev_dip) / prev_dip
        if diff < 0.01:
            if data_dip[index] < prev_dip:
                dip_indexes_to_keep.pop()
            prev_dip = min(data_dip[index], prev_dip)
        else:
            prev_dip = data_dip[index]
            dip_indexes_to_keep.append(index)
    else:
        prev_dip = data_dip[index]
        dip_indexes_to_keep.append(index)

df_tepeler = pd.DataFrame({'Date': data_x[tepe_indexes_to_keep], 'tepe_dip': data_tepe[tepe_indexes_to_keep]})
df_dipler = pd.DataFrame({'Date': data_x[dip_indexes_to_keep], 'tepe_dip': data_dip[dip_indexes_to_keep]})


# tepe/dip noktalarının birleştirilmesi
df_tepeler = pd.DataFrame({'Date': data_x[tepe_indexes], 'tepe_dip': data_tepe[tepe_indexes]})
df_dipler = pd.DataFrame({'Date': data_x[dip_indexes], 'tepe_dip': data_dip[dip_indexes]})
df_tepeler_dipler = pd.concat([df_tepeler, df_dipler], axis=0, ignore_index=True, sort=True)
df_tepeler_dipler = df_tepeler_dipler.sort_values(by=['Date'])

#Normal tarih formatına dönüştürüldü.
df_tepeler_dipler['Date'] = [mdates.num2date(d) for d in df_tepeler_dipler['Date']]

#df de tepe,dip güncellemesi
df['tepe'] = np.zeros(len(df))
df['dip'] = np.zeros(len(df))
df.iloc[tepe_indexes, df.columns.get_loc('tepe')] = data_tepe[tepe_indexes]
df.iloc[dip_indexes, df.columns.get_loc('dip')] = data_dip[dip_indexes]

#Yeni bir tepe ve dip değeri bulunana kadar ilgili kolondaki aynısı tekrar etsin diye yaptım
for i in range(1, len(df)):
    
    if df.iloc[i, df.columns.get_loc('tepe')] == 0:
        df.iloc[i, df.columns.get_loc('tepe')] = df.iloc[i-1, df.columns.get_loc('tepe')]

    if df.iloc[i, df.columns.get_loc('dip')] == 0:
        df.iloc[i, df.columns.get_loc('dip')] = df.iloc[i-1, df.columns.get_loc('dip')]    

# grafikte kapanış fiyatlarının zigzag trendline çizilmesi
(fig, ax) = plt.subplots(figsize=(22, 8))
ax.plot(df_tepeler_dipler['Date'].values, df_tepeler_dipler['tepe_dip'].values, color='orange', label='tepe_dip' )
ax.plot(data_x, data_tepe, linestyle='dashed', color='black', label='Tepeler', linewidth=1)
ax.plot(data_x, data_dip, linestyle='dashed', color='blue', label='Dipler', linewidth=1)
#ax.plot(data_x, data_c, linestyle='dashed', color='red', label='Kapanış', linewidth=1)
ax.xaxis_date()
ax.xaxis.set_major_formatter(mdates.DateFormatter("%d-%m-%y"))


# y-axis de iki dijit olması
fmt = '${x:,.2f}'
tick = mtick.StrMethodFormatter(fmt)
ax.yaxis.set_major_formatter(tick)



#sonradan ekledim çalıştı
plt.scatter( data_x[tepe_indexes],data_tepe[tepe_indexes],label='tepe', s=60, color='green', marker='x')
plt.scatter(data_x[dip_indexes], data_dip[dip_indexes],label='dip', s=60, color='red', marker='x')

# tepe,dip değerleri ve renkleri
for tepe, dip in zip(tepe_indexes, dip_indexes):
    ax.annotate(f'{data_tepe[tepe]:.2f}', (data_x[tepe], data_tepe[tepe]), textcoords="offset points", xytext=(-5,5), ha='center', color='red',size=8)
    ax.annotate(f'{data_dip[dip]:.2f}', (data_x[dip], data_dip[dip]), textcoords="offset points", xytext=(15,5), ha='center', color='green',size=8)



plt.legend()
# Show the plot
plt.show()
